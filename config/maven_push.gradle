apply plugin: 'maven'
apply plugin: 'signing'

configurations {
    archives {
        extendsFrom configurations.default
    }
}

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
    println 'Sonatype RELEASE BUILD'
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'Sonatype SNAPSHOT BUILD'
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

if (ext.properties.containsKey('signing.keyId') &&
        !ext.properties.containsKey('signing.password')) {
    if (System.console()) {
        ext.set('signing.password',
                System.console().readPassword("\n\$ Type in GPG key password: "))
    } else {
        ext.set('signing.password', 'nateriver520')
    }
}

if (!ext.properties.containsKey('nexusUsername')) {
    if (System.console()) {
        ext.set('nexusUsername', new String(System.console().readPassword(
                "\n\$ Type in username for Sonatype nexus account ${nexusUsername}: ")))
    } else {
        ext.set('nexusUsername', 'nateriver520')
    }
}

if (!ext.properties.containsKey('nexusPassword')) {
    if (System.console()) {
        ext.set('nexusPassword', new String(System.console().readPassword(
                "\n\$ Type in password for Sonatype nexus account ${nexusUsername}: ")))
    } else {
        ext.set('nexusPassword', 'nateriver520')
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }

                pom.project {
                    groupId POM_GROUP_ID
                    artifactId POM_ARTIFACT_ID
                    version POM_VERSION
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    inceptionYear POM_INCEPTION_YEAR

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                            comments POM_LICENCE_COMMENTS
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                            url POM_DEVELOPER_URL
                        }
                    }

                    issueManagement {
                        system POM_ISSUE_MANAGEMENT_SYSTEM
                        url POM_ISSUE_MANAGEMENT_URL
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }
}